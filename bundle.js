/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/


var canvas = document.getElementById('canvas');
var ctx = canvas.getContext('2d');
canvas.width = 600;
canvas.height = 800;
canvas.style.border = '1px solid black';
canvas.style.position = 'fixed';
canvas.style.left = "calc(50% - ".concat(canvas.width / 2, "px)");
canvas.style.top = "calc(50% - ".concat(canvas.height / 2, "px)");

while (window.innerWidth < canvas.width) {
  canvas.width -= 20;
  canvas.style.left = "calc(50% - ".concat(canvas.width / 2, "px)");
}

while (window.innerHeight < canvas.height) {
  canvas.height -= 50;
  canvas.style.top = "calc(50% - ".concat(canvas.height / 2, "px)");
} // const img1 = new Image();
// img1.src = "bear.png";


var player = {
  width: 50,
  height: 50,
  x: (canvas.width - 50) / 2,
  y: canvas.height - 50,
  draw: function () {
    ctx.fillStyle = 'green';
    ctx.fillRect(this.x, this.y, this.width, this.height); // ctx.drawImage(img1, this.x, this.y, this.width, this.height);
  }
};

var Block =
/** @class */
function () {
  function Block(location) {
    this.width = 50;
    this.height = 50;
    this.x = Math.random() * (canvas.width / DIFFICULTY - this.width) + location * (canvas.width / DIFFICULTY);
    this.y = 0;
  }

  Block.prototype.draw = function () {
    ctx.fillStyle = 'red';
    ctx.fillRect(this.x, this.y, this.width, this.height);
  };

  return Block;
}();

var Bonus =
/** @class */
function () {
  function Bonus() {
    this.width = 50;
    this.height = 50;
    this.x = Math.random() * (canvas.width - this.width);
    this.y = 0;
  }

  Bonus.prototype.draw = function () {
    ctx.fillStyle = 'blue';
    ctx.fillRect(this.x, this.y, this.width, this.height);
  };

  return Bonus;
}();

var timer = 0;
var score = 0;
var goLeft = false;
var goRight = false;
var leftTimer = 0;
var rightTimer = 0;
var canUseItem = true;
var curStatus = 'intro';
var animation;
var longTabTimer;
var BLOCK_TIME = 60;
var MOVE_SPEED = 10;
var TIMER_TIME = 3;
var DIFFICULTY = 3;
var blockArray = [];
var bonusArray = [];

if (curStatus === 'intro') {
  ctx.fillStyle = 'green';
  ctx.font = 'bold 48px san-serif';
  ctx.fillText('Block a Block', 50, 400);
  ctx.font = 'bold 30px san-serif';
  ctx.fillText("Difficulty: ".concat(String(DIFFICULTY)), 50, 300);
  ctx.fillText("Press 'Enter' to start!", 50, 500);
}

function Frame() {
  animation = requestAnimationFrame(Frame);
  timer++;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.fillText(String(score), 50, 100);

  for (var i = 0; i < DIFFICULTY; i++) {
    if ((timer + BLOCK_TIME / DIFFICULTY * i) % BLOCK_TIME === 0) {
      var block = new Block(i);
      blockArray.push(block);
    }
  }

  blockArray.forEach(function (block, index, array) {
    var CollisionCheck = function (fn) {
      return array.filter(function (v) {
        return v !== block;
      }).findIndex(function (stopedBlock) {
        return fn(stopedBlock, block);
      });
    };

    var collisionEachOther = CollisionCheck(Collision);
    var LeftCollisionEachOther = CollisionCheck(LeftCollision);
    var RightCollisionEachOther = CollisionCheck(RightCollision);
    var stacking = collisionEachOther !== -1 || Collision(player, block);
    var pushingLeft = LeftCollisionEachOther !== -1 || LeftCollision(player, block);
    var pushingRight = RightCollisionEachOther !== -1 || RightCollision(player, block);

    if (block.y < canvas.height) {
      !stacking && (block.y += 1);
    } else {
      array.splice(index, 1);
      score++;
    }

    if (stacking) {
      GoLeft(block);
      GoRight(block);
    } else if (pushingLeft) {
      GoLeft(block);
    } else if (pushingRight) {
      GoRight(block);
    }

    if (block.y === 0) {
      window.cancelAnimationFrame(animation);
      curStatus = 'end';
      ctx.clearRect(0, 200, canvas.width, 350);
      ctx.fillStyle = 'green';
      ctx.font = 'bold 48px san-serif';
      ctx.fillText(String(score), 50, 300);
      ctx.fillText('Game Over', 50, 400);
      ctx.font = 'bold 30px san-serif';
      ctx.fillText("Press 'Enter' to start!", 50, 500);
    }

    block.draw();
  }); // bonus ------------

  if (timer % 1000 === 0) {
    var bonus = new Bonus();
    bonusArray.push(bonus);
  }

  bonusArray.forEach(function (bonus, index, array) {
    var collide = Collision(player, bonus) || LeftCollision(player, bonus) || RightCollision(player, bonus);
    collide && (score += 10);
    bonus.y < 900 && !collide ? bonus.y += 5 : array.splice(index, 1);
    bonus.draw();
  }); // control ------------

  GoLeft(player);
  GoRight(player);
  goLeft && leftTimer++;
  goRight && rightTimer++;

  if (leftTimer > TIMER_TIME) {
    goLeft = false;
    leftTimer = 0;
  }

  if (rightTimer > TIMER_TIME) {
    goRight = false;
    rightTimer = 0;
  }

  player.draw();
}

function Collision(pre, cur) {
  var xCollision = Math.abs(pre.x - cur.x) < pre.width;
  var yCollision = pre.y - cur.y === pre.height;
  return xCollision && yCollision;
}

function LeftCollision(pre, cur) {
  var xCollision = pre.x - cur.x <= pre.width && pre.x - cur.x > 0;
  var yCollision = Math.abs(pre.y - cur.y) < pre.height;
  return xCollision && yCollision;
}

function RightCollision(pre, cur) {
  var xCollision = cur.x - pre.x <= pre.width && cur.x - pre.x > 0;
  var yCollision = Math.abs(pre.y - cur.y) < pre.height;
  return xCollision && yCollision;
}

function GoLeft(thing) {
  player.x > 0 && goLeft && (thing.x -= MOVE_SPEED);
}

function GoRight(thing) {
  player.x + player.width < canvas.width && goRight && (thing.x += MOVE_SPEED);
}

function handleLeftEvent() {
  if (curStatus === 'intro' && DIFFICULTY > 1) {
    DIFFICULTY--;
    ctx.clearRect(0, 100, 500, 250);
    ctx.fillText("Difficulty: ".concat(String(DIFFICULTY)), 50, 300);
  }
}

function handleRightEvent() {
  if (curStatus === 'intro' && DIFFICULTY < 6) {
    DIFFICULTY++;
    ctx.clearRect(0, 100, 500, 250);
    ctx.fillText("Difficulty: ".concat(String(DIFFICULTY)), 50, 300);
  }
}

document.addEventListener('keydown', function (key) {
  switch (key.code) {
    case 'Enter':
      if (curStatus === 'intro') {
        animation = requestAnimationFrame(Frame);
        curStatus = 'start';
      } else if (curStatus === 'end') {
        blockArray.splice(0);
        bonusArray.splice(0);
        timer = 0;
        score = 0;
        canUseItem = true;
        animation = requestAnimationFrame(Frame);
        curStatus = 'start';
      }

      break;

    case 'ArrowLeft':
    case 'KeyA':
      handleLeftEvent();
      goLeft = true;
      break;

    case 'ArrowRight':
    case 'KeyD':
      handleRightEvent();
      goRight = true;
      break;

    case 'Space':
      if (canUseItem === true) {
        blockArray.splice(0);
        canUseItem = false;
      }

      break;

    case 'Escape':
      if (curStatus === 'end') {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillText("Press 'Enter' to start!", 50, 400);
        curStatus = 'intro';
      }

  }
});
canvas.addEventListener('touchstart', function (event) {
  var xTouch = event.changedTouches[0].clientX;
  var yTouch = event.changedTouches[0].clientY;

  if (curStatus === 'intro') {
    longTabTimer = setTimeout(function () {
      animation = requestAnimationFrame(Frame);
      curStatus = 'start';
    }, 1000);
  } else if (curStatus === 'end') {
    longTabTimer = setTimeout(function () {
      blockArray.splice(0);
      bonusArray.splice(0);
      timer = 0;
      score = 0;
      canUseItem = true;
      animation = requestAnimationFrame(Frame);
      curStatus = 'start';
    }, 1000);
  }

  if (yTouch < 300 && canUseItem) {
    blockArray.splice(0);
    canUseItem = false;
  }

  if (xTouch < canvas.width / 2) {
    goLeft = true;
  } else if (xTouch > canvas.width / 2) {
    goRight = true;
  }
});
canvas.addEventListener('touchend', function (event) {
  var xTouch = event.changedTouches[0].clientX;
  var yTouch = event.changedTouches[0].clientY;
  clearTimeout(longTabTimer);

  if (xTouch < canvas.width / 2) {
    handleLeftEvent();
  } else if (xTouch > canvas.width / 2) {
    handleRightEvent();
  }
});
canvas.addEventListener('touchmove', function () {
  clearTimeout(longTabTimer);
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,