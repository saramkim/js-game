(() => {
  'use strict';
  var t = document.getElementById('canvas'),
    i = t.getContext('2d');
  for (
    t.width = 600,
      t.height = 800,
      t.style.border = '1px solid black',
      t.style.position = 'fixed',
      t.style.left = 'calc(50% - '.concat(t.width / 2, 'px)'),
      t.style.top = 'calc(50% - '.concat(t.height / 2, 'px)');
    window.innerWidth < t.width;

  )
    (t.width -= 20), (t.style.left = 'calc(50% - '.concat(t.width / 2, 'px)'));
  for (; window.innerHeight < t.height; )
    (t.height -= 50), (t.style.top = 'calc(50% - '.concat(t.height / 2, 'px)'));
  var e,
    n,
    c = {
      width: 50,
      height: 50,
      x: (t.width - 50) / 2,
      y: t.height - 50,
      draw: function () {
        (i.fillStyle = 'green'),
          i.fillRect(this.x, this.y, this.width, this.height);
      },
    },
    o = (function () {
      function e(i) {
        (this.width = 50),
          (this.height = 50),
          (this.x =
            Math.random() * (t.width / x - this.width) + i * (t.width / x)),
          (this.y = 0);
      }
      return (
        (e.prototype.draw = function () {
          (i.fillStyle = 'red'),
            i.fillRect(this.x, this.y, this.width, this.height);
        }),
        e
      );
    })(),
    r = (function () {
      function e() {
        (this.width = 50),
          (this.height = 50),
          (this.x = Math.random() * (t.width - this.width)),
          (this.y = 0);
      }
      return (
        (e.prototype.draw = function () {
          (i.fillStyle = 'blue'),
            i.fillRect(this.x, this.y, this.width, this.height);
        }),
        e
      );
    })(),
    h = 0,
    a = 0,
    l = 0,
    s = !1,
    f = !1,
    d = 0,
    u = 0,
    w = 'point',
    x = 3,
    y = !0,
    p = 'main',
    g = [],
    m = [];
  function T() {
    (e = requestAnimationFrame(T)),
      i.clearRect(0, 0, t.width, t.height),
      h++,
      'time' === w &&
        (h % 40 == 0 && l++,
        h % 1e3 == 0 && x < 6 && x++,
        i.fillText(String(l), 50, 100)),
      'point' === w && i.fillText(String(a), 50, 100);
    for (var n = 0; n < x; n++)
      if ((h + (90 / x) * n) % 90 == 0) {
        var y = new o(n);
        g.push(y);
      }
    if (
      (g.forEach(function (n, o, r) {
        var h = function (t) {
            return r
              .filter(function (t) {
                return t !== n;
              })
              .findIndex(function (i) {
                return t(i, n);
              });
          },
          s = h(v),
          f = h(S),
          d = h(b),
          u = -1 !== s || v(c, n),
          x = -1 !== f || S(c, n),
          y = -1 !== d || b(c, n);
        n.y < t.height ? !u && (n.y += 1) : (r.splice(o, 1), a++),
          u ? (E(n), R(n)) : x ? E(n) : y && R(n),
          0 === n.y &&
            (window.cancelAnimationFrame(e),
            (p = 'end'),
            i.clearRect(0, 200, t.width, 350),
            (i.fillStyle = 'green'),
            (i.font = 'bold 48px san-serif'),
            'point' === w && i.fillText(String(a), 50, 300),
            'time' === w && i.fillText(String(l), 50, 300),
            i.fillText('Game Over', 50, 400),
            (i.font = 'bold 30px san-serif'),
            i.fillText("Press 'Enter' to start!", 50, 500)),
          n.draw();
      }),
      h % 1e3 == 0)
    ) {
      var k = new r();
      m.push(k);
    }
    m.forEach(function (t, i, e) {
      var n = v(c, t) || S(c, t) || b(c, t);
      'point' === w && n && (a += 10),
        'time' === w && n && (l += 10),
        t.y < 900 && !n ? (t.y += 5) : e.splice(i, 1),
        t.draw();
    }),
      E(c),
      R(c),
      s && d++,
      f && u++,
      d > 3 && ((s = !1), (d = 0)),
      u > 3 && ((f = !1), (u = 0)),
      c.draw();
  }
  function v(t, i) {
    var e = Math.abs(t.x - i.x) < t.width,
      n = t.y - i.y === t.height;
    return e && n;
  }
  function S(t, i) {
    var e = t.x - i.x <= t.width && t.x - i.x > 0,
      n = Math.abs(t.y - i.y) < t.height;
    return e && n;
  }
  function b(t, i) {
    var e = i.x - t.x <= t.width && i.x - t.x > 0,
      n = Math.abs(t.y - i.y) < t.height;
    return e && n;
  }
  function E(t) {
    c.x > 0 && s && (t.x -= 10);
  }
  function R(i) {
    c.x + c.width < t.width && f && (i.x += 10);
  }
  function k() {
    'main' === p &&
      'point' === w &&
      x > 1 &&
      (x--,
      i.clearRect(0, 250, 500, 50),
      i.fillText('difficulty: '.concat(String(x)), 50, 300));
  }
  function A() {
    'main' === p &&
      'point' === w &&
      x < 6 &&
      (x++,
      i.clearRect(0, 250, 500, 50),
      i.fillText('difficulty: '.concat(String(x)), 50, 300));
  }
  function M() {
    'main' === p
      ? (i.clearRect(0, 200, 500, 130),
        'point' === w
          ? (w = 'time')
          : 'time' === w &&
            ((w = 'point'),
            i.fillText('difficulty: '.concat(String(x)), 50, 300)),
        i.fillText('Mode: '.concat(w.toUpperCase()), 50, 250))
      : 'start' === p && !0 === y && (g.splice(0), (y = !1));
  }
  function L() {
    'main' === p
      ? ((e = requestAnimationFrame(T)), 'time' === w && (x = 1), (p = 'start'))
      : 'end' === p &&
        (g.splice(0),
        m.splice(0),
        (h = 0),
        (a = 0),
        (y = !0),
        (e = requestAnimationFrame(T)),
        (p = 'start'));
  }
  'main' === p &&
    ((i.fillStyle = 'green'),
    (i.font = 'bold 48px san-serif'),
    i.fillText('Block a Block', 50, 400),
    (i.font = 'bold 30px san-serif'),
    i.fillText('Mode: '.concat(w.toUpperCase()), 50, 250),
    'point' === w && i.fillText('difficulty: '.concat(String(x)), 50, 300),
    i.fillText("Press 'Enter' to start!", 50, 500)),
    document.addEventListener('keydown', function (t) {
      switch (t.code) {
        case 'Enter':
          L();
          break;
        case 'ArrowLeft':
        case 'KeyA':
          k(), (s = !0);
          break;
        case 'ArrowRight':
        case 'KeyD':
          A(), (f = !0);
          break;
        case 'Space':
          M();
      }
    }),
    t.addEventListener('touchstart', function (i) {
      var e = i.changedTouches[0].clientX,
        c = i.changedTouches[0].clientY;
      (n = setTimeout(function () {
        L();
      }, 1e3)),
        c < 300 && M(),
        e < t.width / 2 ? (s = !0) : e > t.width / 2 && (f = !0);
    }),
    t.addEventListener('touchend', function (i) {
      var e = i.changedTouches[0].clientX;
      i.changedTouches[0].clientY,
        clearTimeout(n),
        e < t.width / 2 ? k() : e > t.width / 2 && A();
    }),
    t.addEventListener('touchmove', function () {
      clearTimeout(n);
    });
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
